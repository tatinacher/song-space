{"version":3,"sources":["assets/img/background2.jpg","lib/request/index.tsx","pages/create/variation/model.ts","api/songs/index.ts","constants/breakpoints.ts","ui/organisms/header/style.tsx","ui/organisms/header/index.tsx","ui/atoms/button-primary/index.tsx","ui/atoms/input/index.ts","ui/atoms/lyrics-text/index.tsx","ui/atoms/text/index.tsx","ui/atoms/textarea/index.tsx","ui/atoms/switch/index.tsx","ui/atoms/title/index.tsx","ui/molecules/search-field/index.tsx","ui/molecules/chord/index.tsx","lib/measurement/index.tsx","ui/organisms/table/style.tsx","ui/organisms/table/index.tsx","assets/icons/melody.svg","constants/chords.ts","lib/chords/index.ts","features/authors/model.ts","api/authors/index.ts","pages/create/variation/index.tsx","pages/create/song/model.ts","pages/create/song/index.tsx","features/song/model.ts","features/visuals/model.ts","pages/song/index.tsx","pages/main/style.tsx","pages/main/model.ts","pages/main/last-records.tsx","pages/main/popular-records.tsx","pages/band/style.tsx","features/song/chords.ts","features/song/song-chords.ts","pages/song-chords/style.tsx","pages/song-chords/index.tsx","pages/bands/index.tsx","pages/router.tsx","pages/main/index.tsx","pages/song-variations/index.tsx","pages/band/index.tsx","index.tsx"],"names":["module","exports","request","a","url","method","params","headers","Accept","options","body","JSON","stringify","console","log","fetch","response","json","result","ok","Error","data","saveSong","createEffect","handleChange","createEvent","$song","createStore","title","fullText","lyrics","songId","chords","updateSong","submitForm","on","state","event","target","name","value","use","songVariation","sample","source","clock","size","device","desktop","tablet","Nav","styled","nav","Menu","li","Content","div","Header","to","role","aria-label","Hide","ButtonPrimary","button","Input","input","LyricsText","props","fontSize","Text","p","Textarea","textarea","Switch","status","onClick","text","id","type","checked","Title","h3","SearchField","Search","placeholder","Chords","textWidth","font","context","document","createElement","getContext","metrics","measureText","Math","round","width","getTextWidth","ChordLine","map","key","color","Chord","TableContainer","table","Thead","thead","Row","td","TableBody","rows","columns","column","Table","length","_extends","Object","assign","i","arguments","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","d","_ref","svgRef","fill","viewBox","height","ref","ForwardRef","forwardRef","chordsKeys","chordColor","chordsSuffixes","checkIfChordsLine","arrLine","word","isChord","chordKey","keyChord","forEach","chord","includes","containsKey","slice","hasSuffix","removeExtraSpaces","line","replace","trim","split","isChordsLine","array","lines","simpleLine","filter","b","findColorByName","allChords","setChords","nextLine","previousColor","res","maxLendth","position","push","chordsLine","repeat","chordposition","parseLyrics","lyricLines","Set","el","add","getAllChords","chordsWithColors","index","setColors","chordsInfo","Array","from","getAuthors","getAuthorSongs","$authors","$authorSongs","done","_","fail","error","$authorSongsPending","pending","Song","_id","song","setField","setSize","newTitle","newText","prepend","e","newSize","MainPage","SearchBlock","Background","img","getLastRecords","$lastSongs","payload","count","LastRecords","lastSongs","useStore","React","songs","SongLink","Container","Block","Big","Small","LastSongs","Link","PopularRecords","getSongVariations","$songVariations","getLyricChrods","$lyricChords","Lyrics","ChordContainer","Mobile","Page","Switches","Changes","Tab","chordToDisplay","Display","allUkulelechords","ukuleleChords","main","suffix","instrument","tunings","find","positions","BandsBlock","routes","path","component","exact","useParams","variation","author","authors","onSubmit","onChange","description","authorSongs","isChordsOn","setChrodsSwitch","isLyricsOn","setLyricsSwitch","lyricChords","changeFontSize","onClickHandler","preview","App","route","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.00707a32.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background2.59db3b91.jpg\";","export type RequestProps = {\n  method: string;\n  url: string;\n  params?: object;\n};\n\nexport const request = async ({\n  url,\n  method,\n  params = {}\n}: RequestProps): Promise<any> => {\n  const request = \"http://localhost:3001/api\" + url;\n  const headers = {\n    \"Content-Type\": \"application/json;charset=UTF-8\",\n    Accept: \"application/json\"\n  };\n  const options =\n    method === \"get\"\n      ? { headers, method }\n      : {\n          headers,\n          method,\n          body: JSON.stringify(params)\n        };\n  console.log(params);\n\n  try {\n    const response = await fetch(request, options);\n    const result = await response.json();\n    if (!response.ok) {\n      throw new Error(result);\n    }\n    return result.data;\n  } catch (error) {\n    throw new Error(error);\n  }\n};\n","import { createStore, createEffect, createEvent, sample } from \"effector\";\nimport { saveSongVariation, SongVariation } from \"api/songs\";\nimport { FormEvent } from \"react\";\n\nexport const SongVariationEmty = {\n  title: \"\",\n  fullText: \"\",\n  lyrics: [],\n  songId: \"\",\n  chords: []\n};\n\nexport const saveSong = createEffect<SongVariation, void>();\nexport const handleChange = createEvent<any>();\nexport const $song = createStore<SongVariation>(SongVariationEmty);\nexport const updateSong = createEvent<any>();\nexport const submitForm = createEvent<FormEvent<HTMLFormElement>>();\n$song.on(handleChange, (state, event) => {\n  return { ...state, [event.target.name]: event.target.value };\n});\n\n$song.on(updateSong, (state, { lyrics, chords }) => {\n  return { ...state, lyrics, chords };\n});\n\nsaveSong.use(saveSongVariation);\n\nsample({\n  source: $song,\n  clock: submitForm,\n  target: saveSong\n});\n","import { request } from \"lib/request\";\nimport { SongsType } from \"constants/types\";\n\nexport type Song = {\n  title: string;\n  id: string;\n};\n\nexport type Chord = {\n  width: number;\n  color: string;\n  name: string;\n};\n\nexport type Line = {\n  chords: Chord[];\n  text: string;\n};\n\nexport type LyricChrods = {\n  title: string;\n  lyrics: Line[];\n};\n\nexport type SongVariation = {\n  _id?: string;\n  title: string;\n  fullText: string;\n  lyrics: Line[];\n  songId: string;\n  chords: string[];\n};\n\nexport const fetchLastRecords = (count: number): Promise<SongVariation[]> =>\n  request({\n    url: \"/last-records\",\n    method: \"get\",\n    params: { count: count }\n  });\n\nexport const fetchSongVariations = (songId: string): Promise<Song[]> =>\n  request({\n    url: `/song/${songId}`,\n    method: \"get\"\n  });\n\nexport const fetchLyricChrods = (id: string): Promise<SongVariation> =>\n  request({\n    url: `/variation/${id}`,\n    method: \"get\"\n  });\n\nexport const saveSongVariation = (\n  songVariation: SongVariation\n): Promise<void> =>\n  request({\n    url: `/add-song-variation`,\n    method: \"post\",\n    params: songVariation\n  });\n\nexport const addSong = (song: SongsType): Promise<void> =>\n  request({\n    url: `/add-song`,\n    method: \"post\",\n    params: song\n  });\n","export const size = {\n  tablet: \"768px\",\n  desktop: \"1440px\"\n};\n\nexport const device = {\n  desktop: `(min-width:${size.desktop})`,\n  tablet: `(min-width:${size.tablet})`\n};\n","import styled from \"styled-components\";\nimport { device } from \"constants/breakpoints\";\n\nexport const Nav = styled.nav`\n  background: var(--bg);\n  display: flex;\n  justify-content: center;\n  border-bottom: 2px solid #d7263d;\n`;\n\nexport const Menu = styled.li`\n  list-style-type: none;\n  font-weight: 400;\n  display: flex;\n  align-items: center;\n  font-family: sans-serif;\n  a {\n    padding: 10px 15px;\n\n    text-decoration: none;\n    color: var(--main);\n    font-weight: 300;\n    text-transform: uppercase;\n    cursor: pointer;\n    letter-spacing: 1px;\n  }\n  &:hover {\n    background: #d7263d;\n  }\n  &:first-child {\n    font-size: 25px;\n  }\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  @media ${device.tablet} {\n    max-width: 350px;\n  }\n  @media ${device.desktop} {\n    max-width: 1000px;\n    width: 100%;\n  }\n`;\n","import * as React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Content, Nav, Menu } from \"./style\";\nimport styled from \"styled-components\";\n\nexport const Header: React.FC = () => (\n  <Nav>\n    <Content>\n      <Menu>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"guitar\">\n            🎸\n          </span>\n        </Link>\n      </Menu>\n      <Menu>\n        <Link to=\"/bands\">Band</Link>\n      </Menu>\n      <Menu>\n        <Link to=\"/song\">Song</Link>\n      </Menu>\n      <Hide>\n        <Menu>\n          <Link to=\"/create-song-variation\">Create Song Variation</Link>\n        </Menu>\n        <Menu>\n          <Link to=\"/create-song\">Create Song</Link>\n        </Menu>\n      </Hide>\n    </Content>\n  </Nav>\n);\n\nexport const Hide = styled.div`\n  display: none;\n`;\n","import styled from \"styled-components\";\n\nexport const ButtonPrimary = styled.button`\n  padding: 10px 15px;\n  font-weight: 300;\n  border: 0;\n  border-radius: 5px;\n  font-size: 16px;\n  letter-spacing: 1px;\n  background: #161126;\n  color: var(--main);\n`;\n","import styled from \"styled-components\";\n\nexport const Input = styled.input`\n  border: 1px solid #ccc;\n  font-size: 14px;\n`;\n","import styled from \"styled-components\";\n\nexport const LyricsText = styled.div<{\n  fontSize: number;\n}>`\n  font-size: ${props => props.fontSize}px;\n  white-space: pre;\n`;\n","import styled from \"styled-components\";\n\nexport const Text = styled.p`\n  font-size: 14px;\n  padding: 5px;\n`;\n","import styled from \"styled-components\";\n\nexport const Textarea = styled.textarea`\n  border: 1px solid #ccc;\n  font-size: 14px;\n  font-family: \"Roboto Mono\", monospace;\n  font-weight: 300;\n  max-width: 500px;\n  width: 100%;\n  height: 200px;\n`;\n","import * as React from \"react\";\n\ninterface SwitchProps {\n  status: boolean;\n  onClick(status: boolean): void;\n  text: string;\n  id: string;\n}\nexport const Switch: React.FC<SwitchProps> = ({\n  status,\n  onClick,\n  text,\n  id\n}) => (\n  <div>\n    <input\n      onClick={() => onClick(status)}\n      type=\"checkbox\"\n      id={id}\n      checked={status}\n    />{\" \"}\n    {text}\n  </div>\n);\n","import styled from \"styled-components\";\n\nexport const Title = styled.h3`\n  padding: 15px;\n`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { ButtonPrimary } from \"ui/atoms\";\n\nexport const SearchField: React.FC = () => (\n  <Search>\n    <Input placeholder=\"search\" />\n    <ButtonPrimary>Search</ButtonPrimary>\n  </Search>\n);\n\nexport const Search = styled.div`\n  padding: 0 20px 0 0;\n  & > * {\n    box-sizing: border-box;\n  }\n`;\n\nexport const Input = styled.input`\n  padding: 10px 20px;\n  border-radius: 5px;\n  border: 0;\n  font-weight: 300;\n  max-width: 190px;\n  outline: none;\n  font-size: 16px;\n  margin-right: 5px;\n  background: #fff;\n  appearance: none;\n  :focus {\n  }\n\n  ::placeholder {\n    font-weight: 100;\n    color: #444054;\n  }\n`;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { getTextWidth } from \"lib/measurement\";\nimport { ChordsType } from \"constants/types\";\n\nexport const Chords: React.FC<{ data?: ChordsType[]; fontSize: number }> = ({\n  data,\n  fontSize\n}) => {\n  if (!data) return null;\n  const textWidth = getTextWidth(\" \", \"14px Roboto Mono\") || 1;\n  return (\n    <ChordLine>\n      {data.map(({ width, name, color }, key) => (\n        <Chord\n          key={key}\n          width={width * textWidth}\n          color={color}\n          fontSize={fontSize}\n        >\n          {name}\n        </Chord>\n      ))}\n    </ChordLine>\n  );\n};\n\nexport const Chord = styled.div<{\n  width: number;\n  color: string;\n  fontSize: number;\n}>`\n  width: ${props => props.width}px;\n  /*background: ${props => props.color};*/\n  font-size: 14px;\n  font-size: ${props => props.fontSize}px;\n`;\n\nexport const ChordLine = styled.div`\n  display: flex;\n`;\n","export const getTextWidth = (text: string, font: string) => {\n  const canvas: HTMLCanvasElement = document.createElement(\"canvas\");\n  const context = canvas.getContext(\"2d\");\n  if (context) {\n    context.font = font;\n    const metrics = context.measureText(text);\n    return Math.round(metrics.width);\n  }\n};\n","import styled from \"styled-components\";\n\nexport const TableContainer = styled.table`\n  padding: 0px;\n  table-layout: fixed;\n  width: 100%;\n  margin: 30px 0;\n`;\n\nexport const Thead = styled.thead`\n  margin: 0px;\n  text-align: center;\n  td {\n    padding: 10px;\n    border-bottom: 1px solid var(--bg);\n  }\n`;\n\nexport const Row = styled.td`\n  border-bottom: 1px solid #bebbbb;\n  padding: 10px;\n  text-align: center;\n  a {\n    color: black;\n    text-decoration: none;\n  }\n  &:hover {\n    background: #bebbbb;\n  }\n`;\n","import * as React from \"react\";\nimport { Row, TableContainer, Thead } from \"./style\";\n\nexport type Column<T> = {\n  name: string;\n  key: keyof T;\n};\n\ninterface TableProps<T> {\n  columns: Column<T>[];\n  data: T[];\n}\n\ninterface TableBodyProps<T> {\n  rows: T;\n  columns: Column<T>[];\n}\n\nexport const TableBody: <T>(\n  props: TableBodyProps<T>\n) => React.ReactElement<TableBodyProps<T>> = ({ rows, columns }) => (\n  <tr>\n    {columns.map((column, key) => (\n      <Row key={key}>{rows[column.key]}</Row>\n    ))}\n  </tr>\n);\n\nexport const Table: <T>(\n  props: TableProps<T>\n) => React.ReactElement<TableProps<T>> = ({ columns, data }) => {\n  if (data.length === 0) return <div>No data</div>;\n  return (\n    <TableContainer>\n      <Thead>\n        <tr>\n          {columns.map((thead, key) => (\n            <td key={key}>{thead.name}</td>\n          ))}\n        </tr>\n      </Thead>\n      <tbody>\n        {data.map((rows, key) => (\n          <TableBody rows={rows} columns={columns} key={key} />\n        ))}\n      </tbody>\n    </TableContainer>\n  );\n};\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  d: \"M 13 3 C 11.895 3 11 3.895 11 5 L 11 8 L 11 14.541016 A 4 4 0 0 0 9 14 A 4 4 0 0 0 5 18 A 4 4 0 0 0 9 22 A 4 4 0 0 0 13 18 L 13 8 L 16.5 8 C 17.881 8 19 6.881 19 5.5 C 19 4.119 17.881 3 16.5 3 L 13 3 z\"\n});\n\nvar SvgMelody = function SvgMelody(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    fill: \"#ffd23f\",\n    viewBox: \"0 0 24 24\",\n    width: \"24px\",\n    height: \"24px\",\n    ref: svgRef\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref2);\n};\n\nvar ForwardRef = React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgMelody, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/melody.916c5209.svg\";\nexport { ForwardRef as ReactComponent };","export const chordsKeys = [\n  \"C\",\n  \"C#\",\n  \"D\",\n  \"Eb\",\n  \"E\",\n  \"F\",\n  \"F#\",\n  \"G\",\n  \"Ab\",\n  \"A\",\n  \"Bb\",\n  \"B\"\n];\n\nexport const chordColor: string[] = [\n  \"#E5FFDE\",\n  \"#F5F1E3\",\n  \"#FFAEA6\",\n  \"#BBCBCB\",\n  \"#087E8B\",\n  \"#C17C74\",\n  \"#FEFFBE\",\n  \"#E5FFDE\",\n  \"#FFAEA6\",\n  \"#BBCBCB\",\n  \"#C17C74\",\n  \"#FEFFBE\"\n];\n\nexport const chordsSuffixes = [\n  \"major\",\n  \"minor\",\n  \"dim\",\n  \"dim7\",\n  \"sus2\",\n  \"sus4\",\n  \"7sus4\",\n  \"7sg\",\n  \"alt\",\n  \"aug\",\n  \"6\",\n  \"69\",\n  \"7\",\n  \"7b5\",\n  \"aug7\",\n  \"9\",\n  \"9b5\",\n  \"aug9\",\n  \"7b9\",\n  \"7#9\",\n  \"11\",\n  \"9#11\",\n  \"13\",\n  \"maj7\",\n  \"maj7b5\",\n  \"maj7#5\",\n  \"maj9\",\n  \"maj11\",\n  \"maj13\",\n  \"m6\",\n  \"m69\",\n  \"m7\",\n  \"m7b5\",\n  \"m9\",\n  \"m11\",\n  \"mmaj7\",\n  \"mmaj7b5\",\n  \"mmaj9\",\n  \"mmaj11\",\n  \"add9\",\n  \"madd9\",\n  \"/E\",\n  \"/F\",\n  \"/F#\",\n  \"/G\",\n  \"/G#\",\n  \"/A\",\n  \"/Bb\",\n  \"/B\",\n  \"/C\",\n  \"/C#\",\n  \"m/B\",\n  \"m/C\",\n  \"m/C#\",\n  \"/D\",\n  \"m/D\",\n  \"/D#\",\n  \"m/D#\",\n  \"m/E\",\n  \"m/F\",\n  \"m/F#\",\n  \"m/G\",\n  \"m/G#\"\n];\n","import { chordsKeys, chordColor, chordsSuffixes } from \"constants/chords\";\nimport { ChordsType, LineType } from \"constants/types\";\n\nconst removeDuplicates = (array: Array<boolean>) => {\n  return array.filter((a, b) => array.indexOf(a) === b);\n};\n\nconst containsKey: (word: string) => string | undefined = word => {\n  let keyChord;\n  chordsKeys.forEach(chord => {\n    if (word.includes(chord)) {\n      keyChord = chord;\n    }\n  });\n  return keyChord;\n};\n\nconst checkIfChordsLine = (arrLine: Array<string>) =>\n  arrLine.map((word: string) => {\n    let isChord = false;\n    const chordKey = containsKey(word);\n    if (!chordKey) {\n      return isChord;\n    }\n\n    const suffix = word.slice(chordKey.length);\n    if (suffix.length === 0) {\n      isChord = true;\n      return isChord;\n    }\n\n    const hasSuffix = chordsSuffixes.includes(word.slice(chordKey.length));\n    if (chordKey && hasSuffix) {\n      isChord = true;\n    }\n    return isChord;\n  });\n\nexport const removeExtraSpaces = (line: string) =>\n  line\n    .replace(/\\s+/g, \" \")\n    .trim()\n    .split(\" \");\n\nexport const isChordsLine = (line: string) => {\n  const arrLine = removeExtraSpaces(line);\n  const lines = checkIfChordsLine(arrLine);\n  const simpleLine = removeDuplicates(lines);\n  return simpleLine.length === 1 && simpleLine[0];\n};\n\nexport const getAllChords = (lyrics: Array<string>) => {\n  const res: Set<string> = new Set();\n  lyrics.forEach(el => {\n    if (isChordsLine(el)) {\n      const chords = removeExtraSpaces(el);\n      chords.forEach(chord => res.add(chord));\n    }\n  });\n  return res;\n};\n\nexport const setColors = (chords: Set<string>) => {\n  const res: Set<ChordsType> = new Set();\n  let index = 0;\n  chords.forEach(chord => {\n    res.add({\n      name: chord,\n      color: chordColor[index],\n      width: 0\n    });\n    index += 1;\n  });\n  return res;\n};\n\nconst findColorByName = (name: string, allChords: Set<ChordsType>) => {\n  let color = \"\";\n  allChords.forEach(chord => {\n    if (chord.name === name) {\n      color = chord.color;\n    }\n  });\n  return color;\n};\n\nexport const setChords = (\n  line: string,\n  chords: Array<string>,\n  allChords: Set<ChordsType>,\n  nextLine: string,\n  previousColor: string\n) => {\n  const res: Array<ChordsType> = [];\n  const maxLendth =\n    nextLine.length > line.length ? nextLine.length : line.length;\n\n  if (line.indexOf(chords[0]) !== 0) {\n    const position = line.indexOf(chords[0]);\n    res.push({\n      name: \"\",\n      width: position,\n      color: previousColor\n    });\n  }\n  let chordsLine = line;\n\n  for (let i = 0; i < chords.length - 1; i++) {\n    const chord = chordsLine.indexOf(chords[i]);\n    const name = chords[i];\n    const nextcord = chordsLine.indexOf(chords[i + 1]);\n    const position = nextcord - chord + 1;\n    const chordColor = findColorByName(name, allChords);\n\n    chordsLine =\n      chordsLine.slice(0, chord) +\n      \" \".repeat(chords[i].length) +\n      chordsLine.slice(chord + chords[i].length, maxLendth);\n\n    res.push({\n      name: name,\n      width: position,\n      color: chordColor\n    });\n  }\n  const chordposition = chordsLine.indexOf(chords[chords.length - 1]);\n  const name = chords[chords.length - 1];\n  const chordColor = findColorByName(name, allChords);\n\n  res.push({\n    name: name,\n    width: maxLendth - chordposition,\n    color: chordColor\n  });\n\n  return { res, chordColor };\n};\n\nexport const parseLyrics: (\n  lyrics: string\n) => { lyrics: LineType[]; chords: string[] } = lyrics => {\n  const lines: LineType[] = [];\n  const lyricLines = lyrics.split(/\\r?\\n/);\n  const allChords = getAllChords(lyricLines);\n  const chordsWithColors = setColors(allChords);\n  let previousColor = \"\";\n  for (let i = 0; i < lyricLines.length; i++) {\n    const line = lyricLines[i];\n    const nextLine = lyricLines[i + 1];\n    const containsChords = isChordsLine(line);\n    if (containsChords && nextLine !== \"\") {\n      const chords = removeExtraSpaces(line);\n      const { res: chordsInfo, chordColor: color } = setChords(\n        line,\n        chords,\n        chordsWithColors,\n        nextLine,\n        previousColor\n      );\n      previousColor = color;\n      lines.push({ chords: chordsInfo, text: nextLine });\n      i += 1;\n    } else {\n      const res: LineType = { text: line };\n      lines.push(res);\n      previousColor = \"\";\n    }\n  }\n  const lyricsChords = Array.from(allChords);\n  return { lyrics: lines, chords: lyricsChords };\n};\n","import { createEffect, createStore } from \"effector\";\n\nimport { Author, AuthorSongs, fetchAuthors, fetchAuthor } from \"api/authors\";\n\nexport const getAuthors = createEffect<void, Author[]>();\nexport const getAuthorSongs = createEffect<string, AuthorSongs>();\n\ngetAuthors.use(fetchAuthors);\ngetAuthorSongs.use(fetchAuthor);\n\nexport const $authors = createStore<Author[]>([]);\nexport const $authorSongs = createStore<AuthorSongs | null>(null);\n\n$authors.on(getAuthors.done, (_, { result }) => {\n  return result;\n});\n\n$authors.on(getAuthors.fail, (_, { params, error }) => {\n  console.log(params, error);\n});\n\nexport const $authorSongsPending = getAuthorSongs.pending;\n\n$authorSongs.on(getAuthorSongs.done, (_, { result }) => {\n  return result;\n});\n\n$authorSongs.on(getAuthorSongs.fail, (_, { params, error }) => {\n  console.log(params, error);\n});\n","import { request } from \"lib/request\";\n\nexport type Author = {\n  author: string;\n  description: string;\n  _id: string;\n};\n\nexport type Song = {\n  title: string;\n  id: string;\n};\n\nexport type AuthorSongs = {\n  author: string;\n  songs: Song[];\n};\n\nexport const fetchAuthors = (): Promise<Author[]> =>\n  request({\n    url: \"/authors\",\n    method: \"get\"\n  });\n\nexport const fetchAuthor = (id: string): Promise<AuthorSongs> =>\n  request({\n    url: `/author/${id}`,\n    method: \"get\"\n  });\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { useStore } from \"effector-react\";\nimport { handleChange, $song, updateSong, submitForm } from \"./model\";\nimport { Text, Textarea, Input, Chords, LyricsText } from \"ui\";\nimport { Melody } from \"assets/icons\";\nimport { parseLyrics } from \"lib/chords\";\nimport {\n  getAuthors,\n  $authors,\n  getAuthorSongs,\n  $authorSongs\n} from \"features/authors\";\nimport { Line } from \"api/songs\";\n\nexport const CreateSongVariation: React.FC = () => {\n  const { title, fullText, lyrics } = useStore($song);\n  const authors = useStore($authors);\n  const authorSongs = useStore($authorSongs);\n  const [fontSize, changeFontSize] = React.useState(14);\n\n  const onClickHandler = React.useCallback(() => {\n    const data = parseLyrics(fullText);\n    updateSong(data);\n  }, [fullText]);\n\n  const preview =\n    lyrics && lyrics.length !== 0 ? (\n      <div>\n        {lyrics.map((line: Line, key: number) => (\n          <div key={key}>\n            <Chords fontSize={fontSize} data={line.chords} />\n            <LyricsText fontSize={fontSize}>{line.text}</LyricsText>\n          </div>\n        ))}\n      </div>\n    ) : (\n      <div>\n        <Melody />\n        <Melody />\n        <Melody />\n      </div>\n    );\n  React.useEffect(() => {\n    getAuthors();\n  }, []);\n\n  return (\n    <Song>\n      <button onClick={() => changeFontSize(fontSize + 1)}>+</button>\n      <button onClick={() => changeFontSize(fontSize - 1)}>-</button>\n      <form onSubmit={submitForm}>\n        <button type=\"submit\">Сохранить</button>\n        <div>\n          <Text>Title:</Text>\n          <Input name=\"title\" value={title} onChange={handleChange} />\n        </div>\n        <div>\n          <Text>Band:</Text>\n          <select\n            onChange={event => {\n              getAuthorSongs(event.target.value);\n            }}\n          >\n            <option value=\"\">Select Author</option>\n            {authors.map(author => (\n              <option key={author._id} value={author._id}>\n                {author.author}\n              </option>\n            ))}\n          </select>\n        </div>\n        <div>\n          <Text>Songs:</Text>\n          <select name=\"songId\" onChange={handleChange}>\n            <option value=\"\">Select Song</option>\n            {authorSongs &&\n              authorSongs.songs.map(song => (\n                <option key={song.id} value={song.id}>\n                  {song.title}\n                </option>\n              ))}\n          </select>\n        </div>\n        <div>\n          <Text>Lyrics:</Text>\n          <Textarea name=\"fullText\" value={fullText} onChange={handleChange} />\n        </div>\n        <button type=\"button\" onClick={onClickHandler}>\n          Parse\n        </button>\n        <Text>Result:</Text>\n        {preview}\n      </form>\n    </Song>\n  );\n};\n\nexport const Song = styled.div`\n  padding: 20px;\n`;\n","import { createStore, createEvent, createEffect, sample } from \"effector\";\nimport { SongsType } from \"constants/types\";\nimport { addSong } from \"api/songs\";\nimport { FormEvent } from \"react\";\n\nconst emptySong = {\n  _id: \"\",\n  title: \"\"\n};\n\nexport const submitForm = createEvent<FormEvent<HTMLFormElement>>();\n\nexport const $song = createStore<SongsType>(emptySong);\nexport const saveSong = createEffect<SongsType, void>();\nexport const handleChange = createEvent<any>();\n$song.on(handleChange, (state, event) => {\n  return { ...state, [event.target.name]: event.target.value };\n});\n\nsaveSong.use(addSong);\n\nsample({\n  source: $song,\n  clock: submitForm,\n  target: saveSong\n});\n","import * as React from \"react\";\nimport { submitForm, handleChange } from \"./model\";\nimport { useStore } from \"effector-react\";\nimport { $song } from \"./model\";\nimport { getAuthors, $authors } from \"features/authors\";\n\nexport const CreateSong: React.FC = () => {\n  const { title, author } = useStore($song);\n  const authors = useStore($authors);\n\n  React.useEffect(() => {\n    getAuthors();\n  }, []);\n  return (\n    <div>\n      <form onSubmit={submitForm}>\n        <input type=\"text\" name=\"title\" value={title} onChange={handleChange} />\n        <div>\n          <div>Band:</div>\n          <select name=\"author\" value={author} onChange={handleChange}>\n            <option value=\"\">Select Author</option>\n            {authors.map(author => (\n              <option key={author._id} value={author._id}>\n                {author.author}\n              </option>\n            ))}\n          </select>\n        </div>\n        <button>Save</button>\n      </form>\n    </div>\n  );\n};\n","import { createStore, createEvent } from \"effector\";\n\nconst st = [\n  ` B        F#        B        F#        E          E7`,\n  `Good day sunshine, good day sunshine, good day sunshine`\n];\n\nexport const setField = createEvent();\nexport const $songTitle = createStore(\"\").on(\n  setField,\n  (_, newTitle) => newTitle\n);\n\nexport const $songText = createStore(st).on(setField, (_, newText) => newText);\n\nexport const handleChange = setField.prepend((e: any) => e.target.value);\n","import { createStore, createEvent } from \"effector\";\n\nexport const setSize = createEvent<number>();\nexport const $fontSize = createStore(14).on(setSize, (_, newSize) => newSize);\n","import * as React from \"react\";\nimport { useStore } from \"effector-react\";\nimport { $songTitle, $songText } from \"features/song/model\";\nimport { $fontSize, setSize } from \"features/visuals/model\";\nimport styled, { StyledComponent } from \"styled-components\";\n\nexport const Song: React.FC = () => {\n  const title = useStore($songTitle);\n  const songText = useStore($songText);\n  const fontSize = useStore($fontSize);\n  return (\n    <>\n      <button onClick={() => setSize(fontSize + 1)}>+</button>\n      <button onClick={() => setSize(fontSize - 1)}>-</button>\n      <div>{title}</div>\n      <Lyric fontSize={fontSize}>{songText[0]}</Lyric>\n      <Lyric fontSize={fontSize}>{songText[1]}</Lyric>\n    </>\n  );\n};\n\nexport const Lyric: StyledComponent<any, any, any> = styled.div<{\n  fontSize: number;\n}>`\n  font-size: ${props => props.fontSize}px;\n`;\n","import styled from \"styled-components\";\nimport img from \"assets/img/background2.jpg\";\nimport { device } from \"constants/breakpoints\";\n\nexport const MainPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const SearchBlock = styled.div`\n  margin: 10px 15px;\n  padding: 40px 0;\n  display: flex;\n  width: 100%;\n`;\n\nexport const Background = styled.div`\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background: var(--bg);\n  background-image: url(${img});\n  background-size: cover;\n  background-repeat: no-repeat;\n  background-position: center center;\n`;\n\nexport const Content = styled.div`\n  @media ${device.tablet} {\n    max-width: 350px;\n  }\n  @media ${device.desktop} {\n    max-width: 1000px;\n    width: 100%;\n    display: flex;\n    padding-top: 40px;\n  }\n`;\n","import { createStore, createEffect } from \"effector\";\nimport { SongVariation, fetchLastRecords } from \"api/songs\";\n\nexport const getLastRecords = createEffect<number, SongVariation[]>();\nexport const $lastSongs = createStore<SongVariation[] | null>(null);\n\n$lastSongs.on(getLastRecords.done, (_, payload) => payload.result);\n\ngetLastRecords.use(fetchLastRecords);\n","import * as React from \"react\";\nimport { useStore } from \"effector-react\";\nimport { $lastSongs, getLastRecords } from \"./model\";\nimport { SongVariation } from \"api/songs\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const LastRecords: React.FC<{ count: number }> = ({ count }) => {\n  const lastSongs: SongVariation[] | null = useStore($lastSongs);\n\n  React.useEffect(() => {\n    getLastRecords(count);\n  }, [count]);\n\n  const songs =\n    !lastSongs || lastSongs.length === 0\n      ? \"No songs found\"\n      : lastSongs.map((song, key) => (\n          <SongLink key={key} to={\"/variation/\" + song._id}>\n            {song.title}\n          </SongLink>\n        ));\n\n  return (\n    <Container>\n      <Block>\n        <Big>Last</Big>\n        <Small>Songs</Small>\n      </Block>\n      <LastSongs>{songs}</LastSongs>\n    </Container>\n  );\n};\n\nexport const LastSongs = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n`;\n\nexport const Big = styled.div`\n  font-weight: 700;\n`;\n\nexport const Small = styled.div`\n  font-weight: 100;\n`;\n\nexport const Block = styled.div`\n  display: flex;\n  padding: 5px 0;\n  font-weight: 200;\n  font-size: 21px;\n  text-decoration: underline;\n`;\n\nexport const SongLink = styled(Link)`\n  text-decoration: none;\n  color: var(--primary);\n  padding-bottom: 20px;\n  position: relative;\n  ::after {\n    content: \"•\";\n    bottom: 0;\n    position: absolute;\n    left: 120px;\n    color: var(--accent);\n  }\n`;\n\nexport const Container = styled.div`\n  padding: 10px 15px;\n  flex: 50%;\n`;\n","import * as React from \"react\";\nimport { useStore } from \"effector-react\";\nimport { $lastSongs, getLastRecords } from \"./model\";\nimport { SongVariation } from \"api/songs\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nexport const PopularRecords: React.FC<{ count: number }> = ({ count }) => {\n  const lastSongs: SongVariation[] | null = useStore($lastSongs);\n\n  React.useEffect(() => {\n    getLastRecords(count);\n  }, [count]);\n\n  const songs =\n    !lastSongs || lastSongs.length === 0\n      ? \"No songs found\"\n      : lastSongs.map((song, key) => (\n          <SongLink key={key} to={\"/variation/\" + song._id}>\n            {song.title}\n          </SongLink>\n        ));\n\n  return (\n    <Container>\n      <Block>\n        <Big>Popular</Big>\n        <Small>Songs</Small>\n      </Block>\n      <LastSongs>{songs}</LastSongs>\n    </Container>\n  );\n};\n\nexport const LastSongs = styled.div`\n  display: flex;\n  flex-direction: column;\n  max-width: 300px;\n`;\n\nexport const Big = styled.div`\n  font-weight: 700;\n`;\n\nexport const Small = styled.div`\n  font-weight: 100;\n`;\n\nexport const Block = styled.div`\n  display: flex;\n  padding: 5px 0;\n  font-weight: 200;\n  font-size: 21px;\n  text-decoration: underline;\n`;\n\nexport const SongLink = styled(Link)`\n  text-decoration: none;\n  color: var(--primary);\n  padding-bottom: 20px;\n  position: relative;\n  ::after {\n    content: \"•\";\n    bottom: 0;\n    position: absolute;\n    left: 120px;\n    color: var(--accent);\n  }\n`;\n\nexport const Container = styled.div`\n  padding: 10px 15px;\n  flex: 50%;\n`;\n","import styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\n\nexport const Title = styled(Link)`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n","import { createStore, createEffect } from \"effector\";\nimport { Song, fetchSongVariations } from \"api/songs\";\n\nexport const getSongVariations = createEffect<string, Song[]>();\nexport const $songVariations = createStore<Song[]>([]);\n\ngetSongVariations.use(fetchSongVariations);\n\n$songVariations.on(getSongVariations.done, (_, { result }) => {\n  return result;\n});\n\n$songVariations.on(getSongVariations.fail, (_, { params, error }) => {\n  console.log(params, error);\n});\n","import { createStore, createEffect } from \"effector\";\nimport { fetchLyricChrods, SongVariation } from \"api/songs\";\n\nexport const getLyricChrods = createEffect<string, SongVariation>();\nexport const $lyricChords = createStore<SongVariation | null>(null);\n\ngetLyricChrods.use(fetchLyricChrods);\n\n$lyricChords.on(getLyricChrods.done, (_, { result }) => {\n  return result;\n});\n\n$lyricChords.on(getLyricChrods.fail, (_, { params, error }) => {\n  console.log(params, error);\n});\n","import styled from \"styled-components\";\n\nexport const Lyrics = styled.div`\n  margin: 0 15px;\n`;\n\nexport const ChordContainer = styled.div`\n  width: 100px;\n  height: 100px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport const Top = styled.div`\n  display: flex;\n  padding-bottom: 50px;\n`;\n\nexport const Mobile = styled.div`\n  display: flex;\n  flex-direction: column;\n  background: white;\n`;\n\nexport const Page = styled.div`\n  display: flex;\n`;\n\nexport const Switches = styled.div`\n  display: flex;\n`;\n\nexport const Changes = styled.div`\n  display: flex;\n  display: none;\n`;\n","import * as React from \"react\";\nimport { useStore } from \"effector-react\";\nimport { getLyricChrods, $lyricChords } from \"features/song\";\nimport { useParams } from \"react-router\";\nimport { SongVariation } from \"api/songs\";\nimport { Title, Chords, LyricsText, Switch } from \"ui\";\nimport {\n  Changes,\n  ChordContainer,\n  Lyrics,\n  Mobile,\n  Page,\n  Switches\n} from \"./style\";\nimport Chord from \"@tombatossals/react-chords/lib/Chord\";\nimport * as ukuleleChords from \"lib/chords/ukulele.json\";\n\nexport const SongChords: React.FC = () => {\n  const { id } = useParams();\n  const [isChordsOn, setChrodsSwitch] = React.useState(false);\n  const [isLyricsOn, setLyricsSwitch] = React.useState(false);\n  React.useEffect(() => {\n    if (id) {\n      getLyricChrods(id);\n    }\n  }, [id]);\n  const lyricChords: SongVariation | null = useStore($lyricChords);\n  const [fontSize, changeFontSize] = React.useState(14);\n\n  if (!lyricChords) return null;\n  const { title, lyrics, chords } = lyricChords;\n\n  return (\n    <Page>\n      {chords && <Tab chords={chords} />}\n      <div>\n        <Changes>\n          <button onClick={() => changeFontSize(fontSize + 1)}>+</button>\n          <button onClick={() => changeFontSize(fontSize - 1)}>-</button>\n        </Changes>\n\n        <Title>{title}</Title>\n        <Switches>\n          <Switch\n            status={!isLyricsOn}\n            onClick={setLyricsSwitch}\n            text=\"Lyrics\"\n            id=\"lyrics\"\n          />\n          <Switch\n            status={!isChordsOn}\n            onClick={setChrodsSwitch}\n            text=\"Chords\"\n            id=\"chords\"\n          />\n        </Switches>\n\n        <Lyrics>\n          {lyrics.map(({ chords, text }, key) => (\n            <div key={key}>\n              {!isChordsOn && (\n                <Chords data={chords} key={key} fontSize={fontSize} />\n              )}\n              {!isLyricsOn && (\n                <LyricsText fontSize={fontSize}>{text}</LyricsText>\n              )}\n            </div>\n          ))}\n        </Lyrics>\n      </div>\n    </Page>\n  );\n};\n\nexport const Tab: React.FC<{ chords: string[] }> = ({ chords }) => (\n  <Mobile>\n    {chords.map((chord, key) => (\n      <Display chordToDisplay={chord} key={key} />\n    ))}\n  </Mobile>\n);\n\ntype T = any;\n\nexport const Display: React.FC<{ chordToDisplay: string }> = ({\n  chordToDisplay\n}) => {\n  const allUkulelechords: T = ukuleleChords.chords;\n\n  const main: keyof T = chordToDisplay.slice(0, 1);\n  const suffix =\n    chordToDisplay.slice(1) === \"\" ? \"major\" : chordToDisplay.slice(1);\n\n  const instrument = { ...ukuleleChords.main, tunings: ukuleleChords.tunings };\n  const chord = allUkulelechords[main].find((el: any) => el.suffix === suffix);\n  if (!chord) return null;\n  console.log(suffix, allUkulelechords[main], chord, allUkulelechords);\n\n  return (\n    <ChordContainer>\n      <div>{chordToDisplay}</div>\n      <Chord chord={chord.positions[0]} instrument={instrument} />\n    </ChordContainer>\n  );\n};\n","import * as React from \"react\";\nimport { $authors, getAuthors } from \"features/authors\";\nimport { useStore } from \"effector-react\";\nimport { Table } from \"ui\";\nimport { Column } from \"ui/organisms/table\";\nimport { Link } from \"react-router-dom\";\nimport styled from \"styled-components\";\n\ntype AuthorSong = {\n  author: React.ReactElement;\n  description: string;\n};\n\nexport const Bands: React.FC = () => {\n  const authors = useStore($authors);\n  const column: Column<AuthorSong>[] = [{ key: \"author\", name: \"Автор\" }];\n\n  React.useEffect(() => {\n    getAuthors();\n  }, []);\n  const data = authors.map(author => {\n    const link = <Link to={\"bands/\" + author._id}>{author.author}</Link>;\n    return {\n      author: link,\n      description: author.description\n    };\n  });\n  return (\n    <BandsBlock>\n      <Table data={data} columns={column} />\n    </BandsBlock>\n  );\n};\n\nexport const BandsBlock = styled.div`\n  max-width: 300px;\n`;\n","import { Bands, Band, Main, SongVariations, CreateSong, SongChords } from \"./\";\nimport { CreateSongVariation } from \"./create/variation\";\n\nexport const routes = [\n  {\n    path: \"/\",\n    component: Main,\n    exact: true\n  },\n  {\n    path: \"/song/:id\",\n    component: SongVariations\n  },\n  {\n    path: \"/create-song\",\n    component: CreateSong\n  },\n  {\n    path: \"/bands\",\n    component: Bands,\n    exact: true\n  },\n  {\n    path: \"/bands/:id\",\n    component: Band\n  },\n  {\n    path: \"/variation/:id\",\n    component: SongChords\n  },\n  {\n    path: \"/create-song-variation\",\n    component: CreateSongVariation\n  }\n];\n","import * as React from \"react\";\nimport { SearchField } from \"ui\";\nimport { Background, Content, MainPage, SearchBlock } from \"./style\";\nimport { LastRecords } from \"./last-records\";\nimport { PopularRecords } from \"./popular-records\";\n\nexport const Main: React.FC = () => (\n  <MainPage>\n    <Background>\n      <Content>\n        <SearchBlock>\n          <SearchField />\n        </SearchBlock>\n      </Content>\n    </Background>\n    <Content>\n      <LastRecords count={10} />\n      <PopularRecords count={10} />\n    </Content>\n  </MainPage>\n);\n","import * as React from \"react\";\nimport { useStore } from \"effector-react\";\nimport { $songVariations, getSongVariations } from \"features/song\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\nimport { Table } from \"ui\";\nimport { Column } from \"ui/organisms/table\";\nimport { Song } from \"api/songs\";\n\ntype Variation = {\n  title: React.ReactElement;\n};\n\nexport const SongVariations: React.FC = () => {\n  const { id } = useParams();\n  React.useEffect(() => {\n    if (id) {\n      getSongVariations(id);\n    }\n  }, [id]);\n  const songVariations: Song[] = useStore($songVariations);\n  const data = songVariations.map(variation => {\n    const title = (\n      <Link to={\"/variation/\" + variation.id}>{variation.title}</Link>\n    );\n    return {\n      title: title\n    };\n  });\n  const column: Column<Variation>[] = [\n    {\n      name: \"Песни\",\n      key: \"title\"\n    }\n  ];\n\n  return (\n    <div>\n      <Table data={data} columns={column} />\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport {\n  $authorSongsPending,\n  getAuthorSongs,\n  $authorSongs\n} from \"features/authors\";\nimport { useStore } from \"effector-react\";\nimport { Table } from \"ui\";\nimport { Column } from \"ui/organisms/table\";\nimport { useParams } from \"react-router\";\nimport { AuthorSongs } from \"api/authors\";\nimport { Melody } from \"assets/icons\";\nimport { Title } from \"./style\";\n\ntype Song = {\n  title: React.ReactElement;\n};\n\nexport const Band: React.FC = () => {\n  const { id } = useParams();\n  React.useEffect(() => {\n    if (id) {\n      getAuthorSongs(id);\n    }\n  }, [id]);\n  const authorSongs: AuthorSongs | null = useStore($authorSongs);\n  const authorSongsPending = useStore($authorSongsPending);\n\n  if (authorSongsPending) return <div>Loading</div>;\n  if (!authorSongs) return <div>Песен пока что нет.</div>;\n\n  const column: Column<Song>[] = [{ key: \"title\", name: authorSongs.author }];\n  const songs = authorSongs.songs.map(song => {\n    const title = (\n      <Title to={\"/song/\" + song.id}>\n        {song.title}\n        <Melody />\n      </Title>\n    );\n    return {\n      title: title\n    };\n  });\n  return <Table data={songs} columns={column} />;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { routes } from \"./pages/router\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { Header } from \"./ui\";\nimport \"./index.css\";\n\nconst App = () => {\n  return (\n    <div>\n      <Header />\n      <Switch>\n        {routes.map((route: any, key) => (\n          <Route key={key} {...route} />\n        ))}\n      </Switch>\n    </div>\n  );\n};\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}